{"version":3,"sources":["HomePageContent.js","App.js","serviceWorker.js","HeaderComponent.js","Project.js","ProjectPageContent.js","index.js"],"names":["HomePageContent","ProjectsButton","withRouter","history","className","type","onClick","push","AboutButton","ResumeButton","App","Boolean","window","location","hostname","match","HeaderComponent","href","Project","state","image","this","props","language","setState","process","title","src","link","React","Component","ProjectsPageContent","data","fetchUser","fetch","then","response","json","inProgProjects","futureProjects","finishedProjects","map","index","id","name","html_url","description","words","project","undefined","split","length","key","routing","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b354a530.chunk.js","sourcesContent":["import React from 'react'\nimport './css/HomePageContent.css'\nimport { withRouter } from 'react-router-dom'\n\nfunction HomePageContent() {\n  //logic\n  const ProjectsButton = withRouter(({ history }) => (\n    <button className=\"Button\"\n      type='button'\n      onClick={() => { history.push('/Repos') }}\n    >\n      Repos\n    </button>\n  ))\n\n  const AboutButton = withRouter(({ history }) => (\n    <button className=\"Button\"\n      type='button'\n      onClick={() => { history.push('/About') }}\n    >\n      About\n    </button>\n  ))\n  const ResumeButton = withRouter(({ history }) => (\n    <button className=\"Button\"\n      type='button'\n      onClick={() => { history.push('/Resume') }}\n    >\n      Resume\n    </button>\n  ))\n  return (\n\n    <div className=\"MainContent\">\n        <h1 className=\"Name\">\n            Erick Wesley Espinoza\n        </h1>\n        <div className=\"ButtonContainer\">\n            <ProjectsButton />\n            <AboutButton />\n            <ResumeButton />\n        </div>\n\n    </div>\n\n  );}\n\nexport default HomePageContent;","import React from 'react';\nimport './css/App.css';\nimport HomePageContent from './HomePageContent';\n\n\n\nfunction App() {\n  return (\n    <HomePageContent />\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport './css/HeaderComponent.css'\n\nfunction HeaderComponent() {\n  //logic\n  return (\n    <div className=\"HeaderComponent\">\n      <div className=\"Header\">\n        <a href=\"#home\">Home </a>\n        <a href=\"#about\">About </a>\n        <a href=\"#resume\">Resume </a>\n         Erick Wesley Espinoza\n      </div>\n    </div>\n  ); // returns the view\n}\n\n\nexport default HeaderComponent;","import React from 'react'\nimport \"./css/Project.css\"\n\n\nclass Project extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      image: '/python.png'\n    }\n  }\n\n  componentDidMount() {\n    switch(this.props.language) {\n      case 'Swift':\n        this.setState({image: `${process.env.PUBLIC_URL}${\"iphone.png\"}`})\n        break;\n      case 'JavaScript':\n        this.setState({image: './js.png'})\n        break;\n      case 'Python':\n        this.setState({image: './python.png'})\n        break;\n      case 'Kotlin':\n        this.setState({image: './android.png'})\n        break;\n        case 'C++':\n          this.setState({image: './c++.png'})\n          break;\n      default:\n        // code block\n    }\n  }\n\n  render(){\n    return (\n      <div className='p'>\n        <div className='card'>\n        <h1>{this.props.title}</h1>\n        <h2>{<img src={this.state.image} />}</h2>\n        <a href={this.props.link}>Link to project</a>\n        </div>\n  \n      </div>\n    ) \n  }\n}\n\n\nexport default Project","import React from 'react'\nimport './css/App.css';\nimport Project from './Project';\n\nclass ProjectsPageContent extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      data: null\n    }\n  }\n  \n  componentDidMount() {\n    this.fetchUser()\n  }\n\n  fetchUser() {    \n    fetch('https://api.github.com/users/WesleyEspinoza/repos')\n  .then(response => response.json())\n  .then((data) =>{\n    this.setState({ data });\n    });\n  }\n\n  render(){\n    var inProgProjects = []\n    var futureProjects = []\n    var finishedProjects = []\n    if(this.state && this.state.data){\n      finishedProjects = this.state.data.map(({id, name, language, html_url, description}, index) => {\n\n        var words = []\n        var project = undefined\n\n        if (description) {\n          words =description.split(\" \");\n        if (words[words.length - 1 ] === \"[{--Cur--}]\"){\n          inProgProjects.push( <Project key={`project-${id}`} title={name} language={language} link={html_url} />)\n        } else if (words[words.length - 1 ] === \"[{--Updt--}]\"){\n          futureProjects.push( <Project key={`project-${id}`} title={name} language={language} link={html_url} />)\n        } else if (words[words.length - 1 ] === \"[{--Fin--}]\"){\n          project = <Project key={`project-${id}`} title={name} language={language} link={html_url} />\n        } \n      }\n\n      return project\n\n      });\n    }\n    \n\n    return (\n      <div className=\"PageContent\">\n        <h1 className=\"Title\">Currently Working on</h1>\n      \n        <div className=\"ProjectsGrid\">\n          {inProgProjects}\n        </div>\n        <h1>Will Update</h1>\n        <div className=\"ProjectsGrid\">\n          {futureProjects}\n        </div>\n        <h1>No Future plans</h1>\n        <div className=\"ProjectsGrid\">\n          {finishedProjects}\n        </div>\n      </div>\n      );\n  }\n\n}\n\nexport default ProjectsPageContent;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Route, HashRouter as Router} from 'react-router-dom'\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport HeaderComponent from './HeaderComponent';\nimport ProjectsPageContent from './ProjectPageContent';\n\nconst routing = (\n    <Router>\n        <HeaderComponent />\n        <div>\n            <Route path=\"/\" component={App}/>\n            <Route path=\"/repos\" component={ProjectsPageContent}/>\n        </div>\n    </Router>\n) \n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}